"use client";

import React, { useEffect, useState, useMemo, useRef } from "react";
import clsx from "clsx";
import { getAllHeaderItems } from "../data/headerItems";
import { Facebook, Instagram, Linkedin, Phone, Twitter } from "lucide-react";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { Pencil, Plus, X } from "lucide-react";
import {
  fetchColorSchemes,
  getColorSchemeStyles,
} from "@/app/builder/utils/colorSchemeUtils";

interface HeaderLayout {
  top_left: string[];
  top_center: string[];
  top_right: string[];
  middle_left: string[];
  middle_center: string[];
  middle_right: string[];
  bottom_left: string[];
  bottom_center: string[];
  bottom_right: string[];
  available?: string[];
}

class LayoutSettings {
  sticky: boolean = false; // initializing with a default value
  maxWidth: string = "";
  currentPreset?: string;
  containers?: HeaderLayout;
}

interface HeaderSettings {
  theme?: string;
  layout?: LayoutSettings;
  html_block_1?: string;
  html_block_2?: string;
  html_block_3?: string;
  html_block_4?: string;
  html_block_5?: string;
  topBarVisible?: boolean;
  topBarHeight?: number;
  showTopBarButton?: boolean;
  topBarColorScheme?: string;
  topBarNavStyle?: "style1" | "style2" | "style3";
  topBarTextTransform?: "uppercase" | "capitalize" | "lowercase";
  logo?: { text?: string; showText?: boolean };
}

interface HeaderProps {
  settings?: HeaderSettings;
  isEditing?: boolean;
  isSelected?: boolean;
  onSelect?: () => void;
}

const HTMLContentMap: Record<string, string> = {
  // Core items
  logo: '<img src="/logo.svg" class="h-8" alt="Logo" />',
  html_block_1: '<div class="html-block-1">HTML Block 1</div>',
  html_block_2: '<div class="html-block-2">HTML Block 2</div>',
  html_block_3: '<div class="html-block-3">HTML Block 3</div>',
  html_block_4: '<div class="html-block-4">HTML Block 4</div>',
  html_block_5: '<div class="html-block-5">HTML Block 5</div>',
  news_letter: '<div class="news-letter">Subscribe to our newsletter</div>',
  account: `<div class="account-widget">
             <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
               <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
             </svg>
           </div>`,
  top_bar_menu: `<div class="top-bar-menu">
                  <a href="#" class="mx-2">About</a>
                  <a href="#" class="mx-2">Contact</a>
                  <a href="#" class="mx-2">FAQ</a>
                </div>`,
  cart: `<div class="cart-widget">
           <svg class="cart-icon" viewBox="0 0 24 24">
             <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z"/>
           </svg>
           <span class="cart-count">0</span>
         </div>`,
  nav_icon: `<button class="nav-icon">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 6h16M4 12h16M4 18h16"/>
              </svg>
            </button>`,
  main_menu: `<nav class="main-menu">
              <ul class="menu-items">
                <li><a href="/">Home</a></li>
                <li><a href="/shop">Shop</a></li>
                <li><a href="/about">About</a></li>
              </ul>
            </nav>`,
  search: `
    <div class="flex items-center w-full overflow-hidden max-w-md bg-white border border-gray-300 rounded-md focus-within:border-blue-500 focus-within:ring-2 focus-within:ring-blue-300">
      <label for="search" class="sr-only">
        Search
      </label>
      <input
        id="search"
        type="text"
        placeholder="Search..."
        class="w-full px-4 py-2 text-gray-700 bg-transparent outline-none focus:ring-0"
        aria-label="Search"
      />
      <button
        class="p-2 ml-2 w-[50px] rounded-s-none text-white bg-blue-500 rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-300"
        aria-label="Search"
      >
        üîç
      </button>
    </div>
`,
  contact: `<div class="contact-widget">
             <a href="tel:+1234567890" class="flex items-center">
               <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                 <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"/>
               </svg>
               Contact Us
             </a>
           </div>`,
  button_1:
    '<a href="#" class="header-button bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded">Button 1</a>',
  button_2:
    '<a href="#" class="header-button bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded">Button 2</a>',
  checkout: `<div class="checkout-widget">
            <a href="/checkout" class="checkout-link">Checkout</a>
          </div>`,
  wishlist: `<div class="wishlist-widget">
            <a href="/wishlist" class="wishlist-link">Wishlist</a>
          </div>`,
  social_icon: `<div class="social-icons">
                 <a href="#" class="mx-1"><img src="/facebook.svg" alt="Facebook" class="w-5 h-5"></a>
                 <a href="#" class="mx-1"><img src="/twitter.svg" alt="Twitter" class="w-5 h-5"></a>
                 <a href="#" class="mx-1"><img src="/instagram.svg" alt="Instagram" class="w-5 h-5"></a>
               </div>`,

  // Extended items
  divider_1: '<div class="divider h-full w-px bg-gray-300 mx-2"></div>',
  divider_2: '<div class="divider h-full w-px bg-gray-300 mx-2"></div>',
  divider_3: '<div class="divider h-full w-px bg-gray-300 mx-2"></div>',
  divider_4: '<div class="divider h-full w-px bg-gray-300 mx-2"></div>',

  // Legacy items (keeping for backward compatibility)
  topBar: '<div class="top-bar">Top Bar</div>',
  headerMain: '<div class="header-main"></div>',
  headerBottom: '<div class="header-bottom"></div>',
  stickyHeader: '<div class="sticky-header"></div>',
  followIcons: `<div class="social-icons flex items-center gap-2">
                  <a href="#" class="text-gray-600 hover:text-blue-600">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5">
                      <path d="M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"></path>
                    </svg>
                  </a>
                  <a href="#" class="text-gray-600 hover:text-blue-400">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5">
                      <path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z"></path>
                    </svg>
                  </a>
                </div>`,
  mainMenu: `<nav class="main-menu">
              <ul class="menu-items">
                <li><a href="/">Home</a></li>
                <li><a href="/shop">Shop</a></li>
                <li><a href="/about">About</a></li>
              </ul>
            </nav>`,
  buttons: '<button class="btn-primary">Button</button>',
  dropdown: `<div class="dropdown">
              <button class="dropdown-toggle">Menu ‚ñæ</button>
              <div class="dropdown-content hidden"></div>
            </div>`,
  mobileMenu: `<button class="mobile-menu-toggle">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 6h16M4 12h16M4 18h16"/>
                </svg>
              </button>`,
  // Add topBarMenu with the same content as top_bar_menu for backward compatibility
  topBarMenu: `<div class="top-bar-menu">
                  <a href="#" class="mx-2">About</a>
                  <a href="#" class="mx-2">Contact</a>
                  <a href="#" class="mx-2">FAQ</a>
                </div>`,
};

// Add a debounce utility at the top of the file, after imports
function debounce<F extends (...args: any[]) => any>(
  func: F,
  wait: number
): (...args: Parameters<F>) => void {
  let timeout: NodeJS.Timeout | null = null;
  return function (...args: Parameters<F>) {
    if (timeout) clearTimeout(timeout);
    timeout = setTimeout(() => {
      func(...args);
    }, wait);
  };
}

// Helper function to check if a custom color scheme is being used
// Defined outside the component to avoid reference errors
const isCustomColorScheme = (schemeId?: string) => {
  return schemeId && schemeId !== "light" && schemeId !== "dark";
};

export default function Header({
  settings = {},
  isEditing,
  isSelected,
  onSelect,
}: HeaderProps) {
  const initHeaderSettings = useMemo(() => {
    return { ...settings };
  }, [settings]);

  // State to store the header settings
  const [headerSettings, setHeaderSettings] =
    useState<HeaderSettings>(initHeaderSettings);

  // Track the last received settings to prevent reprocessing identical settings
  const lastReceivedSettingsRef = useRef<string>("");

  const [layoutItems, setLayoutItems] = useState({
    top_left: [] as string[],
    top_center: [] as string[],
    top_right: [] as string[],
    middle_left: [] as string[],
    middle_center: [] as string[],
    middle_right: [] as string[],
    bottom_left: [] as string[],
    bottom_center: [] as string[],
    bottom_right: [] as string[],
    available: [] as string[],
  });
  const [customHtml, setCustomHtml] = useState<Record<string, string>>({});

  // Add debouncing to prevent rapid state updates
  const settingsUpdateTimeoutRef = React.useRef<NodeJS.Timeout | null>(null);

  // Inside the Header component, after state declarations
  // Add debounced state setters to reduce re-rendering
  const debouncedSetLayoutItems = React.useMemo(
    () =>
      debounce((items: typeof layoutItems) => {
        setLayoutItems(items);
      }, 50),
    [setLayoutItems]
  );

  const debouncedSetHeaderSettings = React.useMemo(
    () =>
      debounce((settings: HeaderSettings) => {
        setHeaderSettings(settings);
      }, 50),
    [setHeaderSettings]
  );

  // Apply settings whenever they change from props
  useEffect(() => {
    // Update settings when props change, only if they differ from current state
    if (JSON.stringify(headerSettings) !== JSON.stringify(settings)) {
      console.log("Header settings changed from props:", settings);

      // Log HTML blocks for debugging
      console.log("HTML blocks in settings:", {
        html_block_1: settings.html_block_1,
        html_block_2: settings.html_block_2,
        html_block_3: settings.html_block_3,
        html_block_4: settings.html_block_4,
        html_block_5: settings.html_block_5,
      });

      // Update our header settings state with the new props
      setHeaderSettings(settings);
    }
  }, [settings, headerSettings]);

  // Initialize layout items using header settings
  useEffect(() => {
    console.log("useEffect: initializing layout items from headerSettings");

    // Initialize layout items if we have containers in header settings
    if (headerSettings.layout && headerSettings.layout.containers) {
      const layout = headerSettings.layout;
      // Use type assertion to tell TypeScript that containers is defined
      const containers = layout.containers!;

      // Apply layout items to state
      const newLayoutItems = {
        top_left: containers.top_left || [],
        top_center: containers.top_center || [],
        top_right: containers.top_right || [],
        middle_left: containers.middle_left || [],
        middle_center: containers.middle_center || [],
        middle_right: containers.middle_right || [],
        bottom_left: containers.bottom_left || [],
        bottom_center: containers.bottom_center || [],
        bottom_right: containers.bottom_right || [],
        available: containers.available || [],
      };

      // Update layout items
      console.log("Setting layout items to:", newLayoutItems);
      setLayoutItems(newLayoutItems);

      // If we have a currentPreset in the settings, notify the parent
      if (layout.currentPreset) {
        console.log("Current preset found:", layout.currentPreset);
        window.parent.postMessage(
          {
            type: "HEADER_PRESET_LOADED",
            presetId: layout.currentPreset,
          },
          "*"
        );
      }
    } else {
      // Set default layout items if no containers in settings
      console.log("No layout containers found in settings, using defaults");

      // Default layout with common items
      const defaultLayout = {
        top_left: [] as string[],
        top_center: [] as string[],
        top_right: [] as string[],
        middle_left: ["mainMenu"] as string[],
        middle_center: ["logo"] as string[],
        middle_right: ["account", "cart"] as string[],
        bottom_left: ["search"] as string[],
        bottom_center: [] as string[],
        bottom_right: [] as string[],
        available: [
          "html_block_1",
          "html_block_2",
          "html_block_3",
          "html_block_4",
          "html_block_5",
        ] as string[],
      };

      setLayoutItems(defaultLayout);
    }
  }, [headerSettings]);

  useEffect(() => {
    const handleMessage = (event: MessageEvent) => {
      // Remove excessive logging that causes flooding
      // console.log("Header received message:", event.data);

      switch (event.data.type) {
        case "UPDATE_HEADER_LAYOUT":
          // Update layout from the message
          if (event.data.presetId) {
            console.log(
              "Updating header layout from message with preset:",
              event.data.presetId
            );

            // Extract the containers from the message, ensuring all required properties are present
            // Use the initializer pattern to guarantee all properties exist
            const existingLayout = { ...layoutItems }; // Start with existing layout to ensure structure
            const containers = {
              ...existingLayout, // Include all existing properties by default
              // Then override with the values from the message
              top_left: Array.isArray(event.data.top_left)
                ? event.data.top_left
                : existingLayout.top_left,
              top_center: Array.isArray(event.data.top_center)
                ? event.data.top_center
                : existingLayout.top_center,
              top_right: Array.isArray(event.data.top_right)
                ? event.data.top_right
                : existingLayout.top_right,
              middle_left: Array.isArray(event.data.middle_left)
                ? event.data.middle_left
                : existingLayout.middle_left,
              middle_center: Array.isArray(event.data.middle_center)
                ? event.data.middle_center
                : existingLayout.middle_center,
              middle_right: Array.isArray(event.data.middle_right)
                ? event.data.middle_right
                : existingLayout.middle_right,
              bottom_left: Array.isArray(event.data.bottom_left)
                ? event.data.bottom_left
                : existingLayout.bottom_left,
              bottom_center: Array.isArray(event.data.bottom_center)
                ? event.data.bottom_center
                : existingLayout.bottom_center,
              bottom_right: Array.isArray(event.data.bottom_right)
                ? event.data.bottom_right
                : existingLayout.bottom_right,
              available: Array.isArray(event.data.available)
                ? event.data.available
                : existingLayout.available,
            };

            // Update the layout items using debounced setter
            debouncedSetLayoutItems(containers);

            // Update the header settings using debounced setter
            const prevLayout = headerSettings.layout || new LayoutSettings();
            debouncedSetHeaderSettings({
              ...headerSettings,
              layout: {
                ...prevLayout,
                currentPreset: event.data.presetId,
                containers: containers,
              },
            });
          }
          break;

        case "LOAD_SETTINGS":
          // Skip detailed logs since they cause flooding
          // console.log("Received LOAD_SETTINGS message");

          if (event.data.settings && event.data.settings.headerSettings) {
            // Stringify the incoming settings for comparison
            const newHeaderSettings = event.data.settings.headerSettings;

            // Force topBarVisible to true in the incoming settings
            newHeaderSettings.topBarVisible = true;

            const newSettingsString = JSON.stringify(newHeaderSettings);

            // Helper function for deep comparison to check meaningful changes
            const hasSignificantChanges = (
              oldSettings: HeaderSettings,
              newSettings: any
            ) => {
              // Compare layout containers structure if both exist
              if (
                oldSettings.layout?.containers &&
                newSettings.layout?.containers
              ) {
                const oldContainers = oldSettings.layout.containers;
                const newContainers = newSettings.layout.containers;

                // Compare each section that actually affects rendering
                const sections = [
                  "top_left",
                  "top_center",
                  "top_right",
                  "middle_left",
                  "middle_center",
                  "middle_right",
                  "bottom_left",
                  "bottom_center",
                  "bottom_right",
                ];

                for (const section of sections) {
                  const oldSection = JSON.stringify(
                    oldContainers[section as keyof HeaderLayout]
                  );
                  const newSection = JSON.stringify(
                    newContainers[section as keyof HeaderLayout]
                  );
                  if (oldSection !== newSection) {
                    // console.log(`Section ${section} changed from ${oldSection} to ${newSection}`);
                    return true;
                  }
                }
              }

              // Check critical rendering properties
              if (oldSettings.topBarVisible !== newSettings.topBarVisible) {
                // console.log(`topBarVisible changed: ${oldSettings.topBarVisible} -> ${newSettings.topBarVisible}`);
                return true;
              }

              // No significant changes found
              return false;
            };

            // Only update if the settings are actually different
            // AND we haven't processed these exact settings recently
            // AND there are meaningful changes that affect rendering
            if (
              JSON.stringify(headerSettings) !== newSettingsString &&
              lastReceivedSettingsRef.current !== newSettingsString &&
              hasSignificantChanges(headerSettings, newHeaderSettings)
            ) {
              // Update our reference to the last received settings
              lastReceivedSettingsRef.current = newSettingsString;

              // console.log("Updating header settings with new values - significant changes detected");
              setHeaderSettings(newHeaderSettings);
            } else {
              // console.log("Skipping duplicate or non-significant settings update");
            }
          }
          break;

        case "UPDATE_HEADER_SETTINGS":
          // Update settings immediately
          setHeaderSettings((prev) => ({ ...prev, ...event.data.settings }));

          // Extract HTML block updates
          const htmlUpdates: Record<string, string> = {};
          let hasHtmlUpdates = false;

          for (const key in event.data.settings) {
            if (
              key &&
              typeof key === "string" &&
              key.startsWith("html_block_")
            ) {
              htmlUpdates[key] = event.data.settings[key];
              hasHtmlUpdates = true;
            }
          }

          // Update HTML content if we have updates
          if (hasHtmlUpdates) {
            console.log(
              "Updating customHtml with IDs:",
              Object.keys(htmlUpdates)
            );
            setCustomHtml((prev) => ({ ...prev, ...htmlUpdates }));
          }
          break;
      }
    };

    window.addEventListener("message", handleMessage);
    return () => window.removeEventListener("message", handleMessage);
  }, []); // Empty dependency array since we don't need to re-create the handler when state changes

  // Memoize getHtmlContent to prevent unnecessary rerenders
  const getHtmlContent = React.useCallback(
    (itemId: string) => {
      // Special case for logo - always return the default HTML
      if (itemId === "logo") {
        // Get logo settings from headerSettings if available
        if (headerSettings.logo && typeof headerSettings.logo === "object") {
          const logoSettings = headerSettings.logo as any;
          const logoText = logoSettings.text || "Your Brand";
          const showText = logoSettings.showText !== false;

          // Create logo HTML based on settings
          if (showText) {
            return `<div class="logo-container">
            <img src="/logo.svg" class="h-8" alt="Logo" />
            <span class="ml-2 font-bold text-lg">${logoText}</span>
          </div>`;
          }
        }
      }

      // Return the HTML content for the item
      return HTMLContentMap[itemId] || "";
    },
    [headerSettings]
  );

  return (
    <div className="Header">{/* Render your header components here */}</div>
  );
}
